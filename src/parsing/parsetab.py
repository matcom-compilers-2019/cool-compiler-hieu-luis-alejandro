
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTARROW ASSIGN AT BOOLEAN CASE CLASS COLON COMMA DIVIDE DOT ELSE EQ ESAC FI ID IF IN INHERITS INTEGER INT_COMP ISVOID LBRACE LET LOOP LPAREN LT LTEQ MINUS MULTIPLY NEW NOT OF PLUS POOL RBRACE RPAREN SELF SEMICOLON STRING THEN TYPE WHILE\n        program : class_list\n        \n        class_list : class_list class SEMICOLON\n                   | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_opt RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE\n        \n        features_list_opt : features_list\n                          | empty\n        \n        features_list : features_list feature SEMICOLON\n                      | feature SEMICOLON\n        \n        feature : ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID COLON TYPE ASSIGN expression\n        \n        feature : ID COLON TYPE\n        \n        formal_params_list  : formal_params_list COMMA formal_param\n                            | formal_param\n        \n        formal_param : ID COLON TYPE\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : BOOLEAN\n        \n        expression : STRING\n        \n        expression  : SELF\n        \n        expression : LBRACE block_list RBRACE\n        \n        block_list : block_list expression SEMICOLON\n                   | expression SEMICOLON\n        \n        expression : ID ASSIGN expression\n        \n        expression : expression DOT ID LPAREN arguments_list_opt RPAREN\n        \n        arguments_list_opt : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : ID LPAREN arguments_list_opt RPAREN\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : expression LT expression\n                   | expression LTEQ expression\n                   | expression EQ expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n         expression : let_expression\n        \n        let_expression : LET ID COLON TYPE IN expression\n                       | nested_lets COMMA LET ID COLON TYPE\n        \n        let_expression : LET ID COLON TYPE ASSIGN expression IN expression\n                       | nested_lets COMMA LET ID COLON TYPE ASSIGN expression\n        \n        nested_lets : ID COLON TYPE IN expression\n                    | nested_lets COMMA ID COLON TYPE\n        \n        nested_lets : ID COLON TYPE ASSIGN expression IN expression\n                    | nested_lets COMMA ID COLON TYPE ASSIGN expression\n        \n        expression : CASE expression OF actions_list ESAC\n        \n        actions_list : actions_list action\n                     | action\n        \n        action : ID COLON TYPE ARROW expression SEMICOLON\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : INT_COMP expression\n        \n        expression : NOT expression\n        \n        empty :\n        '
    
_lr_action_items = {'CLASS':([0,2,6,8,],[4,4,-3,-2,]),'$end':([1,2,6,8,],[0,-1,-3,-2,]),'SEMICOLON':([3,5,14,17,18,28,35,40,41,42,43,44,45,50,73,78,79,80,81,86,94,95,96,97,98,99,100,101,102,104,112,113,128,135,136,144,148,150,154,159,160,161,162,],[6,8,19,-4,23,-13,-5,-17,-12,-18,-19,-20,-21,-43,103,-56,-57,-58,-59,-25,-33,-34,-35,-36,-37,-38,-39,-22,119,-40,-11,-32,-10,-42,-52,-26,-44,-45,-41,-31,163,-46,-47,]),'TYPE':([4,10,21,30,33,37,52,62,64,108,127,138,141,],[7,16,28,36,39,58,78,91,93,125,142,147,150,]),'LBRACE':([7,16,34,39,46,47,48,49,51,53,54,55,58,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[9,22,46,59,46,46,46,46,46,46,46,46,84,46,46,46,46,46,46,46,46,46,46,46,46,-24,46,46,46,46,46,46,-23,46,46,46,46,46,46,46,46,46,]),'INHERITS':([7,],[10,]),'RBRACE':([9,11,12,13,19,22,23,29,40,42,43,44,45,50,72,78,79,80,81,85,86,94,95,96,97,98,99,100,101,103,104,111,113,119,135,136,144,148,150,154,159,161,162,],[-60,17,-6,-7,-9,-60,-8,35,-17,-18,-19,-20,-21,-43,101,-56,-57,-58,-59,112,-25,-33,-34,-35,-36,-37,-38,-39,-22,-24,-40,128,-32,-23,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'ID':([9,12,19,20,22,23,32,34,46,47,48,49,51,53,54,55,56,59,60,61,63,65,66,67,68,69,70,71,72,83,84,103,105,106,107,109,114,115,116,117,118,119,122,123,134,137,139,140,143,145,151,155,156,157,163,],[15,15,-9,24,15,-8,24,40,40,40,40,40,40,40,40,40,82,40,40,40,92,40,40,40,40,40,40,40,40,110,40,-24,40,40,124,126,40,40,40,40,133,-23,124,-54,40,-53,40,40,40,40,40,40,40,40,-55,]),'LPAREN':([15,34,40,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,92,103,105,106,114,115,116,117,119,133,134,139,140,143,145,151,155,156,157,],[20,47,61,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,117,-24,47,47,47,47,47,47,-23,145,47,47,47,47,47,47,47,47,47,]),'COLON':([15,24,26,31,40,82,110,124,126,],[21,30,33,37,62,108,127,138,141,]),'RPAREN':([20,25,27,36,38,40,42,43,44,45,50,61,74,78,79,80,81,86,87,88,89,90,94,95,96,97,98,99,100,101,104,113,117,129,132,135,136,144,145,148,150,153,154,159,161,162,],[26,31,-15,-16,-14,-17,-18,-19,-20,-21,-43,-60,104,-56,-57,-58,-59,-25,113,-27,-28,-30,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-60,-29,144,-42,-52,-26,-60,-44,-45,159,-41,-31,-46,-47,]),'COMMA':([25,27,36,38,40,42,43,44,45,50,57,78,79,80,81,86,88,90,94,95,96,97,98,99,100,101,104,113,129,130,135,136,142,144,148,150,152,154,158,159,161,162,],[32,-15,-16,-14,-17,-18,-19,-20,-21,-43,83,-56,-57,-58,-59,-25,114,-30,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-29,-48,-42,-52,-49,-26,-44,-45,-50,-41,-51,-31,-46,-47,]),'ASSIGN':([28,40,91,125,142,150,],[34,60,116,140,151,157,]),'INTEGER':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-24,42,42,42,42,42,42,-23,42,42,42,42,42,42,42,42,42,]),'BOOLEAN':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-24,43,43,43,43,43,43,-23,43,43,43,43,43,43,43,43,43,]),'STRING':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-24,44,44,44,44,44,44,-23,44,44,44,44,44,44,44,44,44,]),'SELF':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-24,45,45,45,45,45,45,-23,45,45,45,45,45,45,45,45,45,]),'IF':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-24,48,48,48,48,48,48,-23,48,48,48,48,48,48,48,48,48,]),'WHILE':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-24,49,49,49,49,49,49,-23,49,49,49,49,49,49,49,49,49,]),'CASE':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-24,51,51,51,51,51,51,-23,51,51,51,51,51,51,51,51,51,]),'NEW':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-24,52,52,52,52,52,52,-23,52,52,52,52,52,52,52,52,52,]),'ISVOID':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-24,53,53,53,53,53,53,-23,53,53,53,53,53,53,53,53,53,]),'INT_COMP':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-24,54,54,54,54,54,54,-23,54,54,54,54,54,54,54,54,54,]),'NOT':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-24,55,55,55,55,55,55,-23,55,55,55,55,55,55,55,55,55,]),'LET':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,83,84,103,105,106,114,115,116,117,119,134,139,140,143,145,151,155,156,157,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,109,56,-24,56,56,56,56,56,56,-23,56,56,56,56,56,56,56,56,56,]),'DOT':([40,41,42,43,44,45,50,73,74,75,76,77,78,79,80,81,85,86,90,93,94,95,96,97,98,99,100,101,102,104,111,113,120,121,129,130,131,135,136,144,146,148,149,150,152,154,158,159,160,161,162,],[-17,63,-18,-19,-20,-21,-43,63,63,63,63,63,-56,63,63,63,63,63,63,118,63,63,63,63,63,63,63,-22,63,-40,63,-32,63,63,63,63,63,-42,-52,-26,63,63,63,-45,63,-41,63,-31,63,63,63,]),'AT':([40,41,42,43,44,45,50,73,74,75,76,77,78,79,80,81,85,86,90,94,95,96,97,98,99,100,101,102,104,111,113,120,121,129,130,131,135,136,144,146,148,149,150,152,154,158,159,160,161,162,],[-17,64,-18,-19,-20,-21,-43,64,64,64,64,64,-56,64,64,64,64,64,64,64,64,64,64,64,64,64,-22,64,-40,64,-32,64,64,64,64,64,-42,-52,-26,64,64,64,-45,64,-41,64,-31,64,64,64,]),'PLUS':([40,41,42,43,44,45,50,73,74,75,76,77,78,79,80,81,85,86,90,94,95,96,97,98,99,100,101,102,104,111,113,120,121,129,130,131,135,136,144,146,148,149,150,152,154,158,159,160,161,162,],[-17,65,-18,-19,-20,-21,-43,65,65,65,65,65,-56,-57,-58,65,65,65,65,-33,-34,-35,-36,65,65,65,-22,65,-40,65,-32,65,65,65,65,65,-42,-52,-26,65,65,65,-45,65,-41,65,-31,65,65,65,]),'MINUS':([40,41,42,43,44,45,50,73,74,75,76,77,78,79,80,81,85,86,90,94,95,96,97,98,99,100,101,102,104,111,113,120,121,129,130,131,135,136,144,146,148,149,150,152,154,158,159,160,161,162,],[-17,66,-18,-19,-20,-21,-43,66,66,66,66,66,-56,-57,-58,66,66,66,66,-33,-34,-35,-36,66,66,66,-22,66,-40,66,-32,66,66,66,66,66,-42,-52,-26,66,66,66,-45,66,-41,66,-31,66,66,66,]),'MULTIPLY':([40,41,42,43,44,45,50,73,74,75,76,77,78,79,80,81,85,86,90,94,95,96,97,98,99,100,101,102,104,111,113,120,121,129,130,131,135,136,144,146,148,149,150,152,154,158,159,160,161,162,],[-17,67,-18,-19,-20,-21,-43,67,67,67,67,67,-56,-57,-58,67,67,67,67,67,67,-35,-36,67,67,67,-22,67,-40,67,-32,67,67,67,67,67,-42,-52,-26,67,67,67,-45,67,-41,67,-31,67,67,67,]),'DIVIDE':([40,41,42,43,44,45,50,73,74,75,76,77,78,79,80,81,85,86,90,94,95,96,97,98,99,100,101,102,104,111,113,120,121,129,130,131,135,136,144,146,148,149,150,152,154,158,159,160,161,162,],[-17,68,-18,-19,-20,-21,-43,68,68,68,68,68,-56,-57,-58,68,68,68,68,68,68,-35,-36,68,68,68,-22,68,-40,68,-32,68,68,68,68,68,-42,-52,-26,68,68,68,-45,68,-41,68,-31,68,68,68,]),'LT':([40,41,42,43,44,45,50,73,74,75,76,77,78,79,80,81,85,86,90,94,95,96,97,98,99,100,101,102,104,111,113,120,121,129,130,131,135,136,144,146,148,149,150,152,154,158,159,160,161,162,],[-17,69,-18,-19,-20,-21,-43,69,69,69,69,69,-56,-57,-58,69,69,69,69,-33,-34,-35,-36,None,None,None,-22,69,-40,69,-32,69,69,69,69,69,-42,-52,-26,69,69,69,-45,69,-41,69,-31,69,69,69,]),'LTEQ':([40,41,42,43,44,45,50,73,74,75,76,77,78,79,80,81,85,86,90,94,95,96,97,98,99,100,101,102,104,111,113,120,121,129,130,131,135,136,144,146,148,149,150,152,154,158,159,160,161,162,],[-17,70,-18,-19,-20,-21,-43,70,70,70,70,70,-56,-57,-58,70,70,70,70,-33,-34,-35,-36,None,None,None,-22,70,-40,70,-32,70,70,70,70,70,-42,-52,-26,70,70,70,-45,70,-41,70,-31,70,70,70,]),'EQ':([40,41,42,43,44,45,50,73,74,75,76,77,78,79,80,81,85,86,90,94,95,96,97,98,99,100,101,102,104,111,113,120,121,129,130,131,135,136,144,146,148,149,150,152,154,158,159,160,161,162,],[-17,71,-18,-19,-20,-21,-43,71,71,71,71,71,-56,-57,-58,71,71,71,71,-33,-34,-35,-36,None,None,None,-22,71,-40,71,-32,71,71,71,71,71,-42,-52,-26,71,71,71,-45,71,-41,71,-31,71,71,71,]),'THEN':([40,42,43,44,45,50,75,78,79,80,81,86,94,95,96,97,98,99,100,101,104,113,135,136,144,148,150,154,159,161,162,],[-17,-18,-19,-20,-21,-43,105,-56,-57,-58,-59,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'LOOP':([40,42,43,44,45,50,76,78,79,80,81,86,94,95,96,97,98,99,100,101,104,113,135,136,144,148,150,154,159,161,162,],[-17,-18,-19,-20,-21,-43,106,-56,-57,-58,-59,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'OF':([40,42,43,44,45,50,77,78,79,80,81,86,94,95,96,97,98,99,100,101,104,113,135,136,144,148,150,154,159,161,162,],[-17,-18,-19,-20,-21,-43,107,-56,-57,-58,-59,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'ELSE':([40,42,43,44,45,50,78,79,80,81,86,94,95,96,97,98,99,100,101,104,113,120,135,136,144,148,150,154,159,161,162,],[-17,-18,-19,-20,-21,-43,-56,-57,-58,-59,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,134,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'POOL':([40,42,43,44,45,50,78,79,80,81,86,94,95,96,97,98,99,100,101,104,113,121,135,136,144,148,150,154,159,161,162,],[-17,-18,-19,-20,-21,-43,-56,-57,-58,-59,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,135,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'IN':([40,42,43,44,45,50,78,79,80,81,86,91,94,95,96,97,98,99,100,101,104,113,125,131,135,136,144,148,149,150,154,159,161,162,],[-17,-18,-19,-20,-21,-43,-56,-57,-58,-59,-25,115,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,139,143,-42,-52,-26,-44,156,-45,-41,-31,-46,-47,]),'FI':([40,42,43,44,45,50,78,79,80,81,86,94,95,96,97,98,99,100,101,104,113,135,136,144,146,148,150,154,159,161,162,],[-17,-18,-19,-20,-21,-43,-56,-57,-58,-59,-25,-33,-34,-35,-36,-37,-38,-39,-22,-40,-32,-42,-52,-26,154,-44,-45,-41,-31,-46,-47,]),'ESAC':([122,123,137,163,],[136,-54,-53,-55,]),'ARROW':([147,],[155,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,],[2,]),'class':([0,2,],[3,5,]),'features_list_opt':([9,22,],[11,29,]),'features_list':([9,22,],[12,12,]),'empty':([9,22,61,117,145,],[13,13,89,89,89,]),'feature':([9,12,22,],[14,18,14,]),'formal_params_list':([20,],[25,]),'formal_param':([20,32,],[27,38,]),'expression':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,105,106,114,115,116,117,134,139,140,143,145,151,155,156,157,],[41,73,74,75,76,77,79,80,81,85,86,90,94,95,96,97,98,99,100,102,111,120,121,129,130,131,90,146,148,149,152,90,158,160,161,162,]),'let_expression':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,105,106,114,115,116,117,134,139,140,143,145,151,155,156,157,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'nested_lets':([34,46,47,48,49,51,53,54,55,59,60,61,65,66,67,68,69,70,71,72,84,105,106,114,115,116,117,134,139,140,143,145,151,155,156,157,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'block_list':([46,],[72,]),'arguments_list_opt':([61,117,145,],[87,132,153,]),'arguments_list':([61,117,145,],[88,88,88,]),'actions_list':([107,],[122,]),'action':([107,122,],[123,137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',62),
  ('class_list -> class_list class SEMICOLON','class_list',3,'p_class_list','parser.py',68),
  ('class_list -> class SEMICOLON','class_list',2,'p_class_list','parser.py',69),
  ('class -> CLASS TYPE LBRACE features_list_opt RBRACE','class',5,'p_class','parser.py',78),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE','class',7,'p_class_inherits','parser.py',84),
  ('features_list_opt -> features_list','features_list_opt',1,'p_feature_list_opt','parser.py',90),
  ('features_list_opt -> empty','features_list_opt',1,'p_feature_list_opt','parser.py',91),
  ('features_list -> features_list feature SEMICOLON','features_list',3,'p_feature_list','parser.py',97),
  ('features_list -> feature SEMICOLON','features_list',2,'p_feature_list','parser.py',98),
  ('feature -> ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','parser.py',107),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_formals','parser.py',113),
  ('feature -> ID COLON TYPE ASSIGN expression','feature',5,'p_feature_attr_initialized','parser.py',119),
  ('feature -> ID COLON TYPE','feature',3,'p_feature_attr','parser.py',125),
  ('formal_params_list -> formal_params_list COMMA formal_param','formal_params_list',3,'p_formal_list_many','parser.py',131),
  ('formal_params_list -> formal_param','formal_params_list',1,'p_formal_list_many','parser.py',132),
  ('formal_param -> ID COLON TYPE','formal_param',3,'p_formal','parser.py',141),
  ('expression -> ID','expression',1,'p_expression_object_identifier','parser.py',147),
  ('expression -> INTEGER','expression',1,'p_expression_integer_constant','parser.py',153),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean_constant','parser.py',159),
  ('expression -> STRING','expression',1,'p_expression_string_constant','parser.py',165),
  ('expression -> SELF','expression',1,'p_expr_self','parser.py',171),
  ('expression -> LBRACE block_list RBRACE','expression',3,'p_expression_block','parser.py',177),
  ('block_list -> block_list expression SEMICOLON','block_list',3,'p_block_list','parser.py',183),
  ('block_list -> expression SEMICOLON','block_list',2,'p_block_list','parser.py',184),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','parser.py',193),
  ('expression -> expression DOT ID LPAREN arguments_list_opt RPAREN','expression',6,'p_expression_dispatch','parser.py',201),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','parser.py',207),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','parser.py',208),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parser.py',214),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parser.py',215),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','expression',8,'p_expression_static_dispatch','parser.py',224),
  ('expression -> ID LPAREN arguments_list_opt RPAREN','expression',4,'p_expression_self_dispatch','parser.py',230),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math_operations','parser.py',240),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math_operations','parser.py',241),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math_operations','parser.py',242),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math_operations','parser.py',243),
  ('expression -> expression LT expression','expression',3,'p_expression_math_comparisons','parser.py',256),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_math_comparisons','parser.py',257),
  ('expression -> expression EQ expression','expression',3,'p_expression_math_comparisons','parser.py',258),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_with_parenthesis','parser.py',269),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_conditional','parser.py',279),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while_loop','parser.py',285),
  ('expression -> let_expression','expression',1,'p_expression_let','parser.py',295),
  ('let_expression -> LET ID COLON TYPE IN expression','let_expression',6,'p_expression_let_simple','parser.py',301),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE','let_expression',6,'p_expression_let_simple','parser.py',302),
  ('let_expression -> LET ID COLON TYPE ASSIGN expression IN expression','let_expression',8,'p_expression_let_initialized','parser.py',308),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE ASSIGN expression','let_expression',8,'p_expression_let_initialized','parser.py',309),
  ('nested_lets -> ID COLON TYPE IN expression','nested_lets',5,'p_inner_lets_simple','parser.py',315),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE','nested_lets',5,'p_inner_lets_simple','parser.py',316),
  ('nested_lets -> ID COLON TYPE ASSIGN expression IN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',322),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE ASSIGN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',323),
  ('expression -> CASE expression OF actions_list ESAC','expression',5,'p_expression_case','parser.py',333),
  ('actions_list -> actions_list action','actions_list',2,'p_actions_list','parser.py',339),
  ('actions_list -> action','actions_list',1,'p_actions_list','parser.py',340),
  ('action -> ID COLON TYPE ARROW expression SEMICOLON','action',6,'p_action_expr','parser.py',349),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','parser.py',359),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','parser.py',365),
  ('expression -> INT_COMP expression','expression',2,'p_expression_integer_complement','parser.py',371),
  ('expression -> NOT expression','expression',2,'p_expression_boolean_complement','parser.py',377),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',387),
]
